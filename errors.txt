# 08: The program exits with the last command's status code                 [OK]
# 09: The program handles infile's open error                               [OK]
# 10: The output when infile's open error occur is correct   				[OK]

# 12: The program handles execve errors                                     [OK]

The next tests will use the following command:
..//pipex "assets/deepthought.txt" "grep Now" "head -2" "outs/test-xx.txt"
# 18: The output of the command is correct                                  [KO]

The next tests will use the following command:
..//pipex "assets/deepthought.txt" "grep Now" "wc -w" "outs/test-xx.txt"

# 20: The output of the command is correct                                  [KO]

The next tests will use the following command:
..//pipex "assets/deepthought.txt" "grep Now" "cat" "outs/test-xx.txt"
then:
..//pipex "assets/deepthought.txt" "wc -w" "cat" "outs/test-xx.txt"
# 22: The output of the command is correct                                  [KO]

The next tests will use the following command:
..//pipex "assets/deepthought.txt" "notexisting" "wc" "outs/test-xx.txt"
(notexisting is a command that is not supposed to exist)
# 24: The output of the command contains 'command not found'                [OK]

The next tests will use the following command:
..//pipex "assets/deepthought.txt" "cat" "notexisting" "outs/test-xx.txt"
(notexisting is a command that is not supposed to exist)

# 26: The program exits with the right status code                          [OK]
# 27: The output of the command contains 'command not found'                [OK]

The next tests will use the following command:
..//pipex "assets/deepthought.txt" "grep Now" "/usr/bin/cat" "outs/test-xx.txt"
# 30: The output of the command is correct                                  [OK]


OK: Not optimal or like bash (should not invalidate the project)
KO: Test did not pass